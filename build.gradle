buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven { url 'https://jitpack.io' }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlinVersion"
    }
}

group 'com.nrojiani.drone'
version '1.0-SNAPSHOT'

apply plugin: 'kotlin'
apply plugin: 'kotlin-allopen'
apply plugin: 'idea'
apply plugin: 'application'

allOpen {
    // allows mocking for classes w/o directly opening them for release builds
    annotation("com.nrojiani.drone.utils.Mockable")
}

sourceCompatibility = 1.8

repositories {
    jcenter()
    mavenCentral()
}

configurations {
    ktlint
}

dependencies {
    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"

    // Kodein (Dependency Injection Framework)
    implementation "org.kodein.di:kodein-di-generic-jvm:$kodeinVersion"

    // Kotlin-ArgParser (CLI argument parsing)
    implementation "com.xenomachina:kotlin-argparser:$kotlinArgParserVersion"

    // ktlint (linter & formatter)
    ktlint "com.pinterest:ktlint:$ktlintVersion"

    // Unit Testing
    testImplementation "junit:junit:$junitVersion"
    testImplementation "org.jetbrains.kotlin:kotlin-test"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit"
    testImplementation "org.mockito:mockito-all:$mockitoVersion"
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:$mockitoKotlinVersion"
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

application {
    mainClassName = 'com.nrojiani.drone.cli.MainKt'
}

test {
    testLogging {
        exceptionFormat = 'full'
        events = ["passed", "failed", "skipped"]
    }
}

// Make IDE compile to build/ directory like Gradle
idea {
    module {
        inheritOutputDirs = false
        outputDir = compileJava.destinationDir
        testOutputDir = compileTestJava.destinationDir
    }
}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    main = "com.pinterest.ktlint.Main"
    args "src/**/*.kt"
}
check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    classpath = configurations.ktlint
    main = "com.pinterest.ktlint.Main"
    args "-F", "src/**/*.kt"
}
